import fs from 'fs/promises';
import path from 'path';
import { storage } from './storage';

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö
const DATA_DIR = './data';
const SETTINGS_DIR = './data/settings';
const ANALYTICS_DIR = './data/analytics';

interface BackupData {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
  botSettings: any[];
  notificationSettings: any[];
  ratingSettings: any[];
  globalRatingConfig: any[];
  discordServers: any[];
  
  // –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
  curators: any[];
  activities: any[];
  responseTracking: any[];
  taskReports: any[];
  users: any[];
}

export class BackupStorage {
  constructor() {
    this.ensureDirectories();
  }

  private async ensureDirectories() {
    try {
      await fs.mkdir(DATA_DIR, { recursive: true });
      await fs.mkdir(SETTINGS_DIR, { recursive: true });
      await fs.mkdir(ANALYTICS_DIR, { recursive: true });
    } catch (error) {
      console.error('Error creating backup directories:', error);
    }
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ PostgreSQL –≤ —Ñ–∞–π–ª—ã
  async exportAllData(): Promise<void> {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ PostgreSQL –≤ —Ñ–∞–π–ª—ã...');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
      const [
        botSettingsData,
        notificationSettings, 
        ratingSettings,
        globalRatingConfig,
        discordServers,
        curators,
        activities,
        responseTracking,
        taskReports,
        users
      ] = await Promise.all([
        storage.getBotSettings(),
        storage.getNotificationSettings(),
        storage.getRatingSettings(),
        storage.getGlobalRatingConfig(),
        storage.getDiscordServers(),
        storage.getCurators(),
        storage.getRecentActivities(1000), // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        this.getAllResponseTracking(),
        this.getAllTaskReports(),
        this.getAllUsers()
      ]);

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –≤ –º–∞—Å—Å–∏–≤
      const botSettings = Object.entries(botSettingsData).map(([key, value]) => ({ key, value }));

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
      await this.saveToFile(`${SETTINGS_DIR}/bot-settings.json`, botSettings);
      await this.saveToFile(`${SETTINGS_DIR}/notification-settings.json`, notificationSettings);
      await this.saveToFile(`${SETTINGS_DIR}/rating-settings.json`, ratingSettings);
      await this.saveToFile(`${SETTINGS_DIR}/global-rating-config.json`, globalRatingConfig);
      await this.saveToFile(`${SETTINGS_DIR}/discord-servers.json`, discordServers);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
      await this.saveToFile(`${ANALYTICS_DIR}/curators.json`, curators);
      await this.saveToFile(`${ANALYTICS_DIR}/activities.json`, activities);
      await this.saveToFile(`${ANALYTICS_DIR}/response-tracking.json`, responseTracking);
      await this.saveToFile(`${ANALYTICS_DIR}/task-reports.json`, taskReports);
      await this.saveToFile(`${ANALYTICS_DIR}/users.json`, users);

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø
      const fullBackup: BackupData = {
        botSettings,
        notificationSettings: notificationSettings ? [notificationSettings] : [],
        ratingSettings,
        globalRatingConfig: globalRatingConfig ? [globalRatingConfig] : [],
        discordServers,
        curators,
        activities: activities.map(a => ({ ...a, curator: undefined, server: undefined })), // –£–±–∏—Ä–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        responseTracking,
        taskReports,
        users
      };

      await this.saveToFile(`${DATA_DIR}/full-backup.json`, fullBackup);
      
      console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log(`üìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${SETTINGS_DIR}/`);
      console.log(`üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: ${ANALYTICS_DIR}/`);
      console.log(`üíæ –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø: ${DATA_DIR}/full-backup.json`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  // –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ PostgreSQL
  async importAllData(): Promise<void> {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ PostgreSQL...');
    
    try {
      const fullBackupPath = `${DATA_DIR}/full-backup.json`;
      const backupExists = await this.fileExists(fullBackupPath);
      
      if (!backupExists) {
        console.log('‚ö†Ô∏è –§–∞–π–ª –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç');
        return;
      }

      const backup: BackupData = await this.loadFromFile(fullBackupPath);
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏–º–ø–æ—Ä—Ç–∞)
      console.log('üìÑ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞:');
      console.log(`- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞: ${Object.keys(backup.botSettings || {}).length} –∑–∞–ø–∏—Å–µ–π`);
      console.log(`- –ö—É—Ä–∞—Ç–æ—Ä—ã: ${backup.curators?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
      console.log(`- –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${backup.activities?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
      console.log(`- Discord —Å–µ—Ä–≤–µ—Ä—ã: ${backup.discordServers?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
      
      console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
  async scheduleBackup(): Promise<void> {
    const now = new Date();
    const timestamp = now.toISOString().replace(/[:.]/g, '-');
    
    try {
      await this.exportAllData();
      
      // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
      const timestampedBackup = `${DATA_DIR}/backup-${timestamp}.json`;
      const fullBackup = await this.loadFromFile(`${DATA_DIR}/full-backup.json`);
      await this.saveToFile(timestampedBackup, fullBackup);
      
      console.log(`üìÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${timestampedBackup}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞:', error);
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private async saveToFile(filePath: string, data: any): Promise<void> {
    const jsonData = JSON.stringify(data, null, 2);
    await fs.writeFile(filePath, jsonData, 'utf8');
  }

  private async loadFromFile(filePath: string): Promise<any> {
    const fileContent = await fs.readFile(filePath, 'utf8');
    return JSON.parse(fileContent);
  }

  private async fileExists(filePath: string): Promise<boolean> {
    try {
      await fs.access(filePath);
      return true;
    } catch {
      return false;
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã (–∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ storage)
  private async getAllResponseTracking(): Promise<any[]> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã
      const result = await storage.getUnrespondedMessages(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –∫–∞–∫ –æ—Å–Ω–æ–≤—É
      return result || [];
    } catch (error) {
      console.error('Error getting response tracking:', error);
      return [];
    }
  }

  private async getAllTaskReports(): Promise<any[]> {
    try {
      const result = await storage.getPendingTaskReports(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
      return result || [];
    } catch (error) {
      console.error('Error getting task reports:', error);
      return [];
    }
  }

  private async getAllUsers(): Promise<any[]> {
    try {
      // –ü–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      return [];
    } catch (error) {
      console.error('Error getting users:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞–π–ª–æ–≤
  async getBackupStats(): Promise<{
    lastBackup: string | null;
    totalBackups: number;
    settingsFiles: string[];
    analyticsFiles: string[];
  }> {
    try {
      const dataFiles = await fs.readdir(DATA_DIR).catch(() => []);
      const settingsFiles = await fs.readdir(SETTINGS_DIR).catch(() => []);
      const analyticsFiles = await fs.readdir(ANALYTICS_DIR).catch(() => []);
      
      const backupFiles = dataFiles.filter(f => f.startsWith('backup-') && f.endsWith('.json'));
      const lastBackup = backupFiles.length > 0 ? backupFiles.sort().pop() || null : null;
      
      return {
        lastBackup,
        totalBackups: backupFiles.length,
        settingsFiles,
        analyticsFiles
      };
    } catch (error) {
      console.error('Error getting backup stats:', error);
      return {
        lastBackup: null,
        totalBackups: 0,
        settingsFiles: [],
        analyticsFiles: []
      };
    }
  }
}

export const backupStorage = new BackupStorage();