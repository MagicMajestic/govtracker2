// –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
const { spawn } = require('child_process');
const { readFileSync, writeFileSync } = require('fs');

async function testImportWithExclusions() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç —Å –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞–º–∏...');
  
  try {
    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—ç–∫–∞–ø
    const backupData = JSON.parse(readFileSync('./data/full-backup.json', 'utf-8'));
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞ –≤ –±—ç–∫–∞–ø
    const testCurator = {
      id: 999,
      discordId: "999888777",
      name: "FiredCurator",
      factions: ["test"],
      curatorType: "government",
      isActive: true
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä–∞—Ç–æ—Ä–∞ –≤ –±—ç–∫–∞–ø –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
    const existingCurator = backupData.curators.find(c => c.discordId === testCurator.discordId);
    if (!existingCurator) {
      backupData.curators.push(testCurator);
      writeFileSync('./data/full-backup.json', JSON.stringify(backupData, null, 2));
      console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫—É—Ä–∞—Ç–æ—Ä –≤ –±—ç–∫–∞–ø');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ API
    const response = await fetch('http://localhost:5000/api/import-backup', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    const result = await response.json();
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞:', result);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫—É—Ä–∞—Ç–æ—Ä –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∏–º–ø–æ—Ä—Ç–∞
    const curatorsResponse = await fetch('http://localhost:5000/api/curators');
    const curators = await curatorsResponse.json();
    
    const importedCurator = curators.find(c => c.discordId === testCurator.discordId);
    if (importedCurator) {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä –±—ã–ª –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!');
    } else {
      console.log('‚úÖ –£–°–ü–ï–•: –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä –ù–ï –±—ã–ª –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

testImportWithExclusions();